// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountStatus {
  PENDING
  ACTIVATE
  DELETED
}

enum UserGender {
  MALE
  FEMALE
  OTHER
}

// 유저
model User {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(255) // 이름
  mobile      String?    @db.VarChar(16) // 휴대폰 번호
  birth       DateTime   @db.Date // 생년월일
  hashedCi    String     @unique @map("hashed_ci") @db.VarChar(64) // CI
  gender      UserGender // 성별
  isForeigner Boolean    @default(false) @map("foreigner") // 외국인여부

  createdAt DateTime  @default(now()) @map("created_at") // 생성일
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") // 수정일
  deletedAt DateTime? @map("deleted_at") // 삭제일

  account Account?

  @@map("user")
}

// 계정
model Account {
  id              Int           @id @default(autoincrement())
  userId          Int           @unique @map("user_id") // 유저 ID, 하나의 User가 하나의 Account만 가지도록 설정
  loginId         String?       @map("login_id") @db.VarChar(20) // 계정아이디
  email           String?       @db.VarChar(255) // 이메일
  mobile          String?       @db.VarChar(16) // 휴대폰번호
  encryptPassword String        @map("encrypt_password") @db.VarChar(255) // 암호화된 비밀번호
  status          AccountStatus @default(PENDING) // 계정 상태

  createdAt DateTime  @default(now()) @map("created_at") // 생성일
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") // 수정일
  deletedAt DateTime? @map("deleted_at") // 삭제일

  user          User           @relation(fields: [userId], references: [id])
  socialAccount SocialAccount?

  @@map("account")
}

// 소셜 계정
model SocialAccount {
  id             Int    @id @default(autoincrement()) /// 소셜 계정 ID
  accountId      Int    @unique @map("account_id") // 계정 ID, 하나의 Account가 하나의 SocialAccount만 가지도록 설정
  provider       String @db.VarChar(20) // 소셜 로그인 제공자 (kakao, google, naver, apple)
  providerUserId String @map("provider_user_id") @db.VarChar(255) /// 소셜 제공자에서 사용하는 유저 ID

  createdAt DateTime  @default(now()) @map("created_at") /// 생성일
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") /// 수정일
  deletedAt DateTime? @map("deleted_at") // 삭제일

  account Account @relation(fields: [accountId], references: [id]) /// 계정

  @@unique([provider, providerUserId]) // 동일 소셜 ID 중복 방지
  @@index([provider, providerUserId])
  @@map("social_account")
}
